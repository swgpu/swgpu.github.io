"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[2120],{1311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=n(4848),s=n(8453);const i={},o="Gfx2TreePartitionMethod",c={id:"Module Gfx2/Gfx2TreePartitionMethod",title:"Gfx2TreePartitionMethod",description:"A 2D binary tree space partition method for quick search intersections.",source:"@site/docs/Module Gfx2/Gfx2TreePartitionMethod.md",sourceDirName:"Module Gfx2",slug:"/Module Gfx2/Gfx2TreePartitionMethod",permalink:"/docs/Module Gfx2/Gfx2TreePartitionMethod",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Gfx2/Gfx2TreePartitionMethod.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gfx2TreePartition",permalink:"/docs/Module Gfx2/Gfx2TreePartition"},next:{title:"Gfx3BoundingBox",permalink:"/docs/Module Gfx3/Gfx3BoundingBox"}},d={},l=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function a(e){const t={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"gfx2treepartitionmethod",children:"Gfx2TreePartitionMethod"})}),"\n",(0,r.jsx)(t.p,{children:"A 2D binary tree space partition method for quick search intersections."}),"\n",(0,r.jsx)(t.h2,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"new Gfx2TreePartitionMethod"}),"(rect: Gfx2BoundingRect, axis): Gfx2TreePartitionMethod\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"rect"}),": The partition rectangle."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"axis"}),": The partition split axis."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"draw"}),"(): void"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"search"}),"(node: TreePartitionNode, target: Gfx2BoundingRect, results: Gfx2BoundingRect[])",(0,r.jsx)(t.br,{}),"\nSearch and return all objects that intersect with the target."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"node"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"target"}),": The target object."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"results"}),": All matching objects."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"split"}),"(objects: Gfx2BoundingRect[]): SplitResult",(0,r.jsx)(t.br,{}),"\nSplits objects into left and right based on a specified axis, finally it returns new partition methods for each side."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"objects"}),": A list of bounding rectangle."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>c});var r=n(6540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);