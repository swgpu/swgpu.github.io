"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[7562],{8356:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var i=r(4848),s=r(8453);const t={},d="Gfx3DynamicGroup",o={id:"Module Gfx3/Gfx3DynamicGroup",title:"Gfx3DynamicGroup",description:"Interface to bind the uniform buffer and textures to the GPU pipeline.",source:"@site/docs/Module Gfx3/Gfx3DynamicGroup.md",sourceDirName:"Module Gfx3",slug:"/Module Gfx3/Gfx3DynamicGroup",permalink:"/docs/Module Gfx3/Gfx3DynamicGroup",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Gfx3/Gfx3DynamicGroup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gfx3Drawable",permalink:"/docs/Module Gfx3/Gfx3Drawable"},next:{title:"Gfx3Flare",permalink:"/docs/Module Gfx3/Gfx3Flare"}},l={},c=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function h(n){const e={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(e.header,{children:(0,i.jsx)(e.h1,{id:"gfx3dynamicgroup",children:"Gfx3DynamicGroup"})}),"\n",(0,i.jsx)(e.p,{children:"Interface to bind the uniform buffer and textures to the GPU pipeline.\r\nNote: Used for multiple bind groups."}),"\n",(0,i.jsx)(e.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"new Gfx3DynamicGroup"}),"(device: GPUDevice, pipeline: GPURenderPipeline, groupIndex: number): Gfx3DynamicGroup\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"device"}),": The GPU device."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"pipeline"}),": The graphics pipeline."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"groupIndex"}),": The shader group index."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"allocate"}),"(size: number): void",(0,i.jsx)(e.br,{}),"\nCreates multiple bind groups with the provided uniforms entries."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"size"}),": The number of bind groups to allocate/duplicate."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"beginWrite"}),"(): void",(0,i.jsx)(e.br,{}),"\nPrepare to write process.\r\nWarning: You need to call this method before write your data."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"delete"}),"(): void",(0,i.jsx)(e.br,{}),"\nDestroys the GPU buffer.\r\nWarning: you need to call this method to free allocation for this object."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"endWrite"}),"(): void",(0,i.jsx)(e.br,{}),"\nClose the write process."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"getBindGroup"}),"(index: number): GPUBindGroup",(0,i.jsx)(e.br,{}),"\nReturns the bind group at specified index."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"index"}),": The index."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"getSize"}),"(): number",(0,i.jsx)(e.br,{}),"\nReturns the number of bind groups."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"setFloat"}),"(binding: number, name: string, length: number): Float32Array",(0,i.jsx)(e.br,{}),"\nSet a float-typed uniform entry and returns a writable buffer."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"name"}),": The name of the uniform."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"length"}),": The number of float."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"setInteger"}),"(binding: number, name: string, length: number): Uint32Array",(0,i.jsx)(e.br,{}),"\nSet a integer-typed uniform entry and returns a writable buffer."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"name"}),": The name of the uniform."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"length"}),": The number of integer."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"write"}),"(binding: number, data): void",(0,i.jsx)(e.br,{}),"\nWrite data buffer to the uniform buffer."]}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"data"}),": The data buffer."]}),"\n"]}),"\n"]}),"\n"]})]})}function u(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(h,{...n})}):h(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>d,x:()=>o});var i=r(6540);const s={},t=i.createContext(s);function d(n){const e=i.useContext(t);return i.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(s):n.components||s:d(n.components),i.createElement(t.Provider,{value:e},n.children)}}}]);