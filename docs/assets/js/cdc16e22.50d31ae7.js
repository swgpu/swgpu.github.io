"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3517],{6992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>h,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>i});var r=t(4848),s=t(8453);const o={},h="AIPathGraphSolver",a={id:"Module Ai/AIPathGraphSolver",title:"AIPathGraphSolver",description:"Implements the A* algorithm to find the shortest path between two nodes in a graph.",source:"@site/docs/Module Ai/AIPathGraphSolver.md",sourceDirName:"Module Ai",slug:"/Module Ai/AIPathGraphSolver",permalink:"/docs/Module Ai/AIPathGraphSolver",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Ai/AIPathGraphSolver.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AIPathGraph3D",permalink:"/docs/Module Ai/AIPathGraph3D"},next:{title:"AIPathGrid",permalink:"/docs/Module Ai/AIPathGrid"}},d={},i=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function l(e){const n={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"aipathgraphsolver",children:"AIPathGraphSolver"})}),"\n",(0,r.jsx)(n.p,{children:"Implements the A* algorithm to find the shortest path between two nodes in a graph."}),"\n",(0,r.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"new AIPathGraphSolver"}),"(): AIPathGraphSolver"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"heuristic"}),"(graph: AIPathGraph, nodeA: AIPathNode, nodeB: AIPathNode): number",(0,r.jsx)(n.br,{}),"\nCalculates the distance between two nodes in a graph."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"graph"}),": The path graph."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"nodeA"}),": The node A."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"nodeB"}),": The node B."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"solve"}),"(graph: AIPathGraph, startNode: AIPathNode, endNode: AIPathNode)",(0,r.jsx)(n.br,{}),"\nFind the shortest path between a start node and an end node in a given graph and returns the path."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"graph"}),": The path graph."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"startNode"}),": The starting node of the path."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"endNode"}),": The destination node."]}),"\n"]}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>h,x:()=>a});var r=t(6540);const s={},o=r.createContext(s);function h(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:h(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);