"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[3373],{3136:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>s,metadata:()=>d,toc:()=>a});var r=n(4848),i=n(8453);const s={},o="AIPathGridSolver",d={id:"Module Ai/AIPathGridSolver",title:"AIPathGridSolver",description:"Implements the A* algorithm to find the shortest path between a start coordinate and an end coordinate on a grid.",source:"@site/docs/Module Ai/AIPathGridSolver.md",sourceDirName:"Module Ai",slug:"/Module Ai/AIPathGridSolver",permalink:"/docs/Module Ai/AIPathGridSolver",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Ai/AIPathGridSolver.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AIPathGrid3D",permalink:"/docs/Module Ai/AIPathGrid3D"},next:{title:"ArrayCollection",permalink:"/docs/Module Core/ArrayCollection"}},l={},a=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function h(e){const t={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"aipathgridsolver",children:"AIPathGridSolver"})}),"\n",(0,r.jsx)(t.p,{children:"Implements the A* algorithm to find the shortest path between a start coordinate and an end coordinate on a grid."}),"\n",(0,r.jsx)(t.h2,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"new AIPathGridSolver"}),"(): AIPathGridSolver"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"heuristic"}),"(grid: AIPathGrid, a: T, b: T)",(0,r.jsx)(t.br,{}),"\nReturns an array of more closest to least close directions to move from point A to point B on a given grid."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"grid"}),": The grid."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"a"}),": The starting position in the grid."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"b"}),": The destination position in the grid."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"solve"}),"(grid: AIPathGrid, startCoord: T, endCoord: T)",(0,r.jsx)(t.br,{}),"\nFind the shortest path between a start node and an end node in a given grid and returns the path."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"grid"}),": A grid representing the pathfinding area. It contains information about the obstacles and the values of each cell (empty = 0, obstacle = 1)."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"startCoord"}),": The starting position in the grid."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"endCoord"}),": The destination position in the grid."]}),"\n"]}),"\n"]}),"\n"]})]})}function c(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var r=n(6540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);