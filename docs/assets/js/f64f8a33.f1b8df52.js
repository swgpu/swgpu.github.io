"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5974],{4775:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>x,frontMatter:()=>s,metadata:()=>d,toc:()=>h});var i=r(4848),t=r(8453);const s={},o="Gfx3StaticGroup",d={id:"Module Gfx3/Gfx3StaticGroup",title:"Gfx3StaticGroup",description:"Interface to bind the uniform buffer and textures to the GPU pipeline.",source:"@site/docs/Module Gfx3/Gfx3StaticGroup.md",sourceDirName:"Module Gfx3",slug:"/Module Gfx3/Gfx3StaticGroup",permalink:"/docs/Module Gfx3/Gfx3StaticGroup",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Gfx3/Gfx3StaticGroup.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gfx3SpriteRenderer",permalink:"/docs/Module Gfx3/Gfx3SpriteRenderer"},next:{title:"Gfx3TextureManager",permalink:"/docs/Module Gfx3/Gfx3TextureManager"}},l={},h=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function c(e){const n={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"gfx3staticgroup",children:"Gfx3StaticGroup"})}),"\n",(0,i.jsx)(n.p,{children:"Interface to bind the uniform buffer and textures to the GPU pipeline.\r\nNote: Used for one bind group."}),"\n",(0,i.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"new Gfx3StaticGroup"}),"(device: GPUDevice, pipeline: GPURenderPipeline, groupIndex: number): Gfx3StaticGroup\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"device"}),": The GPU device."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"pipeline"}),": The graphics pipeline."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"groupIndex"}),": The shader group index."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"allocate"}),"(): void",(0,i.jsx)(n.br,{}),"\nCreates a bind group with the provided uniforms and textures entries."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"beginWrite"}),"(): void",(0,i.jsx)(n.br,{}),"\nPrepare to write process.\r\nWarning: You need to call this method before write your data."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"delete"}),"(): void",(0,i.jsx)(n.br,{}),"\nDestroys the GPU buffer.\r\nWarning: you need to call this method to free allocation for this object."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"endWrite"}),"(): void",(0,i.jsx)(n.br,{}),"\nClose the write process."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"getBindGroup"}),"(): GPUBindGroup",(0,i.jsx)(n.br,{}),"\nReturns the bind group."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"setFloat"}),"(binding: number, name: string, length: number): Float32Array",(0,i.jsx)(n.br,{}),"\nSet a float-typed uniform entry and returns a writable buffer."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"name"}),": The name of the uniform."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"length"}),": The number of float."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"setInteger"}),"(binding: number, name: string, length: number): Uint32Array",(0,i.jsx)(n.br,{}),"\nSet a integer-typed uniform entry and returns a writable buffer."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"name"}),": The name of the uniform."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"length"}),": The number of integer."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"setSampler"}),"(binding: number, name: string, texture: Gfx3Texture): Gfx3Texture",(0,i.jsx)(n.br,{}),"\nSet a sampler resource for uniform entry."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"name"}),": The name of the uniform."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"texture"}),": The texture."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"setTexture"}),"(binding: number, name: string, texture: Gfx3Texture, createViewDescriptor: GPUTextureViewDescriptor): Gfx3Texture",(0,i.jsx)(n.br,{}),"\nSet a texture resource for uniform entry."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"name"}),": The name of the uniform."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"texture"}),": The texture."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"createViewDescriptor"}),": Specify how the texture view should be created, such as the format, dimension, and mip\r\nlevel range of the view."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"write"}),"(binding: number, data): void",(0,i.jsx)(n.br,{}),"\nWrite data buffer to the uniform buffer."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"binding"}),": The binding index of the uniform in the shader program."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"data"}),": The data buffer."]}),"\n"]}),"\n"]}),"\n"]})]})}function x(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>d});var i=r(6540);const t={},s=i.createContext(t);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);