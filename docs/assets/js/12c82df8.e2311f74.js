"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[1755],{8476:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var o=s(4848),t=s(8453);const r={},l="ObjectPool",c={id:"Module Core/ObjectPool",title:"ObjectPool",description:"Manage a pool of objects, it take a original mesh and make numInstances clones.",source:"@site/docs/Module Core/ObjectPool.md",sourceDirName:"Module Core",slug:"/Module Core/ObjectPool",permalink:"/docs/Module Core/ObjectPool",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Core/ObjectPool.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"EventManager",permalink:"/docs/Module Core/EventManager"},next:{title:"Quaternion",permalink:"/docs/Module Core/Quaternion"}},i={},d=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function a(e){const n={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"objectpool",children:"ObjectPool"})}),"\n",(0,o.jsx)(n.p,{children:"Manage a pool of objects, it take a original mesh and make numInstances clones.\r\nNote: You can perfectly do without pool but for some cases it is used to keep performance stables."}),"\n",(0,o.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"new ObjectPool"}),"(originObject: T, numInstances: number, reset): ObjectPool\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"originObject"}),": The original object."]}),"\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"numInstances"}),": The number of allocated instances."]}),"\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"reset"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"acquire"}),"()",(0,o.jsx)(n.br,{}),"\nReturns unused object, or null if all instance are used."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"delete"}),"(): void",(0,o.jsx)(n.br,{}),"\nFree all resources.\r\nWarning: You need to call this method to free allocation for pooling objects."]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"dispose"}),"(object: Poolable): void",(0,o.jsx)(n.br,{}),"\nMarks an object as unused."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:[(0,o.jsx)(n.strong,{children:"object"}),": The object to dispose."]}),"\n"]}),"\n"]}),"\n",(0,o.jsxs)(n.li,{children:["\n",(0,o.jsxs)(n.p,{children:[(0,o.jsx)(n.strong,{children:"foreach"}),"(cb): void",(0,o.jsx)(n.br,{}),"\nCall callback for each instances."]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:(0,o.jsx)(n.strong,{children:"cb"})}),"\n"]}),"\n"]}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(a,{...e})}):a(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>l,x:()=>c});var o=s(6540);const t={},r=o.createContext(t);function l(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);