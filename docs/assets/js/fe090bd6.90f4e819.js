"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6613],{1358:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var s=r(4848),i=r(8453);const t={},l="Gfx3Drawable",o={id:"Module Gfx3/Gfx3Drawable",title:"Gfx3Drawable",description:"A 3D drawable object.",source:"@site/docs/Module Gfx3/Gfx3Drawable.md",sourceDirName:"Module Gfx3",slug:"/Module Gfx3/Gfx3Drawable",permalink:"/docs/docs/Module Gfx3/Gfx3Drawable",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Gfx3/Gfx3Drawable.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gfx3DebugRenderer",permalink:"/docs/docs/Module Gfx3/Gfx3DebugRenderer"},next:{title:"Gfx3DynamicGroup",permalink:"/docs/docs/Module Gfx3/Gfx3DynamicGroup"}},d={},c=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function x(e){const n={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"gfx3drawable",children:"Gfx3Drawable"})}),"\n",(0,s.jsx)(n.p,{children:"A 3D drawable object."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"inherit from: Gfx3Transformable"}),"\n",(0,s.jsx)(n.li,{children:"parent of: Gfx3Flare, Gfx3Mesh, Gfx3Particles, Gfx3Skybox, Gfx3Sprite"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"new Gfx3Drawable"}),"(vertexStride: number): Gfx3Drawable\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"vertexStride"}),": The number of attributes for each vertex."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"beginVertices"}),"(vertexCount: number): void",(0,s.jsx)(n.br,{}),"\nPrepare your vertex buffer to write process.\r\nWarning: You need to call this method before define your vertices."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"vertexCount"}),": The number of vertices."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"clone"}),"(drawable: Gfx3Drawable, transformMatrix: mat4): Gfx3Drawable",(0,s.jsx)(n.br,{}),"\nClone the object."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"drawable"}),": The copy object."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"transformMatrix"}),": The transformation matrix."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"defineVertex"}),"(v: number[]): void",(0,s.jsx)(n.br,{}),"\nAdd a vertex."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"v"}),": The attributes data of the vertex."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"delete"}),"(): void",(0,s.jsx)(n.br,{}),"\nFree all resources.\r\nWarning: You need to call this method to free allocation for this object."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"draw"}),"(): void",(0,s.jsx)(n.br,{}),"\nVirtual draw function."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"endVertices"}),"(): void",(0,s.jsx)(n.br,{}),"\nClose your vertex buffer to write process."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getBoundingBox"}),"(): Gfx3BoundingBox",(0,s.jsx)(n.br,{}),"\nReturns the bounding box."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getId"}),"(): vec4",(0,s.jsx)(n.br,{}),"\nReturns the identifier."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getStringId"}),"(): string",(0,s.jsx)(n.br,{}),"\nReturns the identifier as string."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getVertexCount"}),"(): number",(0,s.jsx)(n.br,{}),"\nReturns the number of vertices."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getVertexSubBufferOffset"}),"(): number",(0,s.jsx)(n.br,{}),'\nReturns the vertex sub-buffer offset in the global vertex buffer.\r\nNota bene: All vertices are stored in one global vertex buffer handled by "Gfx3Manager".\r\nSubBuffer is just a reference offset/size pointing to the big one buffer.']}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getVertexSubBufferSize"}),"(): number",(0,s.jsx)(n.br,{}),"\nReturns the byte length of the vertex sub buffer."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getVertices"}),"()",(0,s.jsx)(n.br,{}),"\nReturns vertices."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"getWorldBoundingBox"}),"(): Gfx3BoundingBox",(0,s.jsx)(n.br,{}),"\nReturns the bounding box in the world space coordinates."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"setBoundingBox"}),"(boundingBox: Gfx3BoundingBox): void",(0,s.jsx)(n.br,{}),"\nSet the bounding box."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"boundingBox"}),": The bounding box."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"setId"}),"(r: number, g: number, b: number, a: number): void",(0,s.jsx)(n.br,{}),"\nSet an identifier based on three components.\r\nNote: WARME use some specials ID's in its internal pipeline, check the table below:\r\n\u25a0 decals group: g = n\r\n\u25a0 pixelation: r = -1\r\n\u25a0 color limitation: g = -1\r\n\u25a0 dither: b = -1\r\n\u25a0 outline: a = -1"]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"r"}),": The r integer value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"g"}),": The g integer value. Used by decals for group identification."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"b"}),": The b integer value."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"a"}),": The a integer value."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"setVertices"}),"(vertices: number[]): void",(0,s.jsx)(n.br,{}),"\nSet vertices."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"vertices"}),": The list of vertices."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"update"}),"(ts: number): void",(0,s.jsx)(n.br,{}),"\nVirtual update function."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"ts"}),": The timestep."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(x,{...e})}):x(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);