"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9167],{917:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>a,contentTitle:()=>l,default:()=>d,frontMatter:()=>t,metadata:()=>o,toc:()=>c});var s=r(4848),i=r(8453);const t={},l="Quaternion",o={id:"Module Core/Quaternion",title:"Quaternion",description:"A quaternion.",source:"@site/docs/Module Core/Quaternion.md",sourceDirName:"Module Core",slug:"/Module Core/Quaternion",permalink:"/docs/Module Core/Quaternion",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Core/Quaternion.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ObjectPool",permalink:"/docs/Module Core/ObjectPool"},next:{title:"TreePartition",permalink:"/docs/Module Core/TreePartition"}},a={},c=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function h(n){const e={br:"br",em:"em",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...n.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(e.header,{children:(0,s.jsx)(e.h1,{id:"quaternion",children:"Quaternion"})}),"\n",(0,s.jsx)(e.p,{children:"A quaternion.\r\nThis class is a fork from Quaternion.js.\r\nThanks to"}),"\n",(0,s.jsx)(e.h2,{id:"constructors",children:"Constructors"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"new Quaternion"}),"(w: number, x: number, y: number, z: number): Quaternion\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(e.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"add"}),"(w: number, x: number, y: number, z: number): Quaternion",(0,s.jsx)(e.br,{}),"\nAdds two quaternions Q1 and Q2"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"clone"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nClones the actual object"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"conjugate"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nCalculates the conjugate of a quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"div"}),"(w: number, x: number, y: number, z: number): Quaternion",(0,s.jsx)(e.br,{}),"\nMultiplies a quaternion with the inverse of a second quaternion"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"dot"}),"(w: number, x: number, y: number, z: number): number",(0,s.jsx)(e.br,{}),"\nCalculates the dot product of two quaternions"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"equals"}),"(w: number, x: number, y: number, z: number): boolean",(0,s.jsx)(e.br,{}),"\nChecks if two quats are the same"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"exp"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nCalculates the natural exponentiation of the quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"imag"}),"(): vec3",(0,s.jsx)(e.br,{}),"\nReturns the imaginary part of the quaternion as a 3D vector / array"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"inverse"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nCalculates the inverse of a quat for non-normalized quats such that\r\nQ^-1 * Q = 1 and Q * Q^-1 = 1"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"isFinite"}),"(): boolean",(0,s.jsx)(e.br,{}),"\nChecks if all parts of a quaternion are finite"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"isNaN"}),"(): boolean",(0,s.jsx)(e.br,{}),"\nChecks if any of the parts of the quaternion is not a number"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"log"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nCalculates the natural logarithm of the quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"mul"}),"(w: number, x: number, y: number, z: number): Quaternion",(0,s.jsx)(e.br,{}),"\nCalculates the Hamilton product of two quaternions\r\nLeaving out the imaginary part results in just scaling the quat"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"neg"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nCalculates the additive inverse, or simply it negates the quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"norm"}),"(): number",(0,s.jsx)(e.br,{}),"\nCalculates the length/modulus/magnitude or the norm of a quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"normSq"}),"(): number",(0,s.jsx)(e.br,{}),"\nCalculates the squared length/modulus/magnitude or the norm of a quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"normalize"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nNormalizes the quaternion to have |Q| = 1 as long as the norm is not zero\r\nAlternative names are the signum, unit or versor"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"real"}),"(): number",(0,s.jsx)(e.br,{}),"\nReturns the real part of the quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"rotateVector"}),"(v: vec3): vec3",(0,s.jsx)(e.br,{}),"\nRotates a vector according to the current quaternion, assumes |q|=1"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"v"}),": The vector to be rotated"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"rotateX"}),"(rad: number): Quaternion",(0,s.jsx)(e.br,{}),"\nRotates a quaternion by the given angle about the X axis"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"rad"}),": angle (in radians) to rotate"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"rotateY"}),"(rad: number): Quaternion",(0,s.jsx)(e.br,{}),"\nRotates a quaternion by the given angle about the Y axis"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"rad"}),": angle (in radians) to rotate"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"rotateZ"}),"(rad: number): Quaternion",(0,s.jsx)(e.br,{}),"\nRotates a quaternion by the given angle about the Z axis"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"rad"}),": angle (in radians) to rotate"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"scale"}),"(s: number): Quaternion",(0,s.jsx)(e.br,{}),"\nScales a quaternion by a scalar, faster than using multiplication"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"s"}),": scaling factor"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"slerp"}),"(w: number, x: number, y: number, z: number): Function",(0,s.jsx)(e.br,{}),"\nGets a function to spherically interpolate between two quaternions"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"sub"}),"(w: number, x: number, y: number, z: number): Quaternion",(0,s.jsx)(e.br,{}),"\nSubtracts a quaternions Q2 from Q1"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"toAxisAngle"}),"()",(0,s.jsx)(e.br,{}),"\nCalculates the axis and angle representation of the quaternion"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"toCSSTransform"}),"(): string",(0,s.jsx)(e.br,{}),"\nDetermines the homogeneous rotation matrix string used for CSS 3D transforms"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"toMatrix"}),"(): mat3",(0,s.jsx)(e.br,{}),"\nCalculates the 3x3 rotation matrix for the current quat"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"toMatrix4"}),"(): mat4",(0,s.jsx)(e.br,{}),"\nCalculates the homogeneous 4x4 rotation matrix for the current quat"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.strong,{children:"toVector"}),"(): vec4",(0,s.jsx)(e.br,{}),"\nGets the actual quaternion as a 4D vector / array"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"static"})," ",(0,s.jsx)(e.strong,{children:"createFromAxisAngle"}),"(axis: vec3, angle: number): Quaternion",(0,s.jsx)(e.br,{}),"\nCreates quaternion by a rotation given as axis-angle orientation"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"axis"}),": The axis around which to rotate"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"angle"}),": The angle in radians"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"static"})," ",(0,s.jsx)(e.strong,{children:"createFromBetweenVectors"}),"(u: vec3, v: vec3): Quaternion",(0,s.jsx)(e.br,{}),"\nCalculates the quaternion to rotate vector u onto vector v"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"u"}),": The first vector."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"v"}),": The second vector."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"static"})," ",(0,s.jsx)(e.strong,{children:"createFromEuler"}),"(\u03c6: number, \u03b8: number, \u03c8: number, order: string): Quaternion",(0,s.jsx)(e.br,{}),"\nCreates a quaternion by a rotation given by Euler angles (multiplication order from right to left)"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u03c6"}),": First angle"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u03b8"}),": Second angle"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"\u03c8"}),": Third angle"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"order"}),": Axis order (Tait Bryan)"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"static"})," ",(0,s.jsx)(e.strong,{children:"createFromLookAt"}),"(lookAt: vec3, up: vec3): Quaternion",(0,s.jsx)(e.br,{}),"\nCreates a quaternion from a lookat direction"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"lookAt"}),": The lookAt direction vector."]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"up"}),": The up vector."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"static"})," ",(0,s.jsx)(e.strong,{children:"createFromMatrix"}),"(matrix: mat3): Quaternion",(0,s.jsx)(e.br,{}),"\nCreates a quaternion by a rotation matrix"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"matrix"}),": The matrix."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"static"})," ",(0,s.jsx)(e.strong,{children:"createNormalized"}),"(w: number, x: number, y: number, z: number): Quaternion",(0,s.jsx)(e.br,{}),"\nCreates a new normalized Quaternion object"]}),"\n",(0,s.jsxs)(e.ul,{children:["\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"w"}),": real"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"x"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"y"}),": imag"]}),"\n",(0,s.jsxs)(e.li,{children:[(0,s.jsx)(e.strong,{children:"z"}),": imag"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(e.li,{children:["\n",(0,s.jsxs)(e.p,{children:[(0,s.jsx)(e.em,{children:"static"})," ",(0,s.jsx)(e.strong,{children:"createRandom"}),"(): Quaternion",(0,s.jsx)(e.br,{}),"\nGets a spherical random number"]}),"\n"]}),"\n"]})]})}function d(n={}){const{wrapper:e}={...(0,i.R)(),...n.components};return e?(0,s.jsx)(e,{...n,children:(0,s.jsx)(h,{...n})}):h(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>l,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function l(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:l(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);