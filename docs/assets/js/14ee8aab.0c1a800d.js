"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[8802],{2125:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>s,metadata:()=>d,toc:()=>c});var r=n(4848),i=n(8453);const s={},o="Gfx3TreePartitionMethod",d={id:"Module Gfx3/Gfx3TreePartitionMethod",title:"Gfx3TreePartitionMethod",description:"A 3D binary tree partition method for quick search intersections.",source:"@site/docs/Module Gfx3/Gfx3TreePartitionMethod.md",sourceDirName:"Module Gfx3",slug:"/Module Gfx3/Gfx3TreePartitionMethod",permalink:"/docs/Module Gfx3/Gfx3TreePartitionMethod",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/Module Gfx3/Gfx3TreePartitionMethod.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Gfx3TreePartition",permalink:"/docs/Module Gfx3/Gfx3TreePartition"},next:{title:"Gfx3View",permalink:"/docs/Module Gfx3/Gfx3View"}},l={},c=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2}];function a(e){const t={br:"br",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"gfx3treepartitionmethod",children:"Gfx3TreePartitionMethod"})}),"\n",(0,r.jsx)(t.p,{children:"A 3D binary tree partition method for quick search intersections."}),"\n",(0,r.jsx)(t.h2,{id:"constructors",children:"Constructors"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"new Gfx3TreePartitionMethod"}),"(box: Gfx3BoundingBox, axis): Gfx3TreePartitionMethod\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"box"}),": The position and size of the partition box."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"axis"}),": The split axis of the partition."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"methods",children:"Methods"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"draw"}),"(): void",(0,r.jsx)(t.br,{}),"\nThe draw function."]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"search"}),"(node: TreePartitionNode, target: Gfx3BoundingBox, results: Gfx3BoundingBox[])",(0,r.jsx)(t.br,{}),"\nSearch and return all objects that intersect with the target."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.strong,{children:"node"})}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"target"}),": The target object."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"results"}),": All matching objects."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{children:["\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"split"}),"(objects: Gfx3BoundingBox[]): SplitResult",(0,r.jsx)(t.br,{}),"\nSplits objects into left and right based on a specified axis, finally it returns new partition methods for each side."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"objects"}),": A list of bounding box."]}),"\n"]}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(a,{...e})}):a(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>d});var r=n(6540);const i={},s=r.createContext(i);function o(e){const t=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function d(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),r.createElement(s.Provider,{value:t},e.children)}}}]);